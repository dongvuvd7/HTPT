//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.8.3928.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ExamForBerkeley03Soap", Namespace="http://www.hocvienmang.com/")]
public partial class ExamForBerkeley03 : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetInputDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback SubmitOperationCompleted;
    
    /// <remarks/>
    public ExamForBerkeley03() {
        this.Url = "http://www.hocvienmang.com/Exams/ExamForBerkeley03.asmx";
    }
    
    /// <remarks/>
    public event GetInputDataCompletedEventHandler GetInputDataCompleted;
    
    /// <remarks/>
    public event SubmitCompletedEventHandler SubmitCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.hocvienmang.com/GetInputData", RequestNamespace="http://www.hocvienmang.com/", ResponseNamespace="http://www.hocvienmang.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetInputData(string UserName, string UserPass, int ExamId, long QuestionId, out string[] MemberTimes) {
        object[] results = this.Invoke("GetInputData", new object[] {
                    UserName,
                    UserPass,
                    ExamId,
                    QuestionId});
        MemberTimes = ((string[])(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetInputData(string UserName, string UserPass, int ExamId, long QuestionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetInputData", new object[] {
                    UserName,
                    UserPass,
                    ExamId,
                    QuestionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetInputData(System.IAsyncResult asyncResult, out string[] MemberTimes) {
        object[] results = this.EndInvoke(asyncResult);
        MemberTimes = ((string[])(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetInputDataAsync(string UserName, string UserPass, int ExamId, long QuestionId) {
        this.GetInputDataAsync(UserName, UserPass, ExamId, QuestionId, null);
    }
    
    /// <remarks/>
    public void GetInputDataAsync(string UserName, string UserPass, int ExamId, long QuestionId, object userState) {
        if ((this.GetInputDataOperationCompleted == null)) {
            this.GetInputDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInputDataOperationCompleted);
        }
        this.InvokeAsync("GetInputData", new object[] {
                    UserName,
                    UserPass,
                    ExamId,
                    QuestionId}, this.GetInputDataOperationCompleted, userState);
    }
    
    private void OnGetInputDataOperationCompleted(object arg) {
        if ((this.GetInputDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetInputDataCompleted(this, new GetInputDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.hocvienmang.com/Submit", RequestNamespace="http://www.hocvienmang.com/", ResponseNamespace="http://www.hocvienmang.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string Submit(string UserName, string UserPass, int ExamId, long QuestionId, int[] CalibrateMs, string CorrectedDateTime) {
        object[] results = this.Invoke("Submit", new object[] {
                    UserName,
                    UserPass,
                    ExamId,
                    QuestionId,
                    CalibrateMs,
                    CorrectedDateTime});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSubmit(string UserName, string UserPass, int ExamId, long QuestionId, int[] CalibrateMs, string CorrectedDateTime, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Submit", new object[] {
                    UserName,
                    UserPass,
                    ExamId,
                    QuestionId,
                    CalibrateMs,
                    CorrectedDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndSubmit(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SubmitAsync(string UserName, string UserPass, int ExamId, long QuestionId, int[] CalibrateMs, string CorrectedDateTime) {
        this.SubmitAsync(UserName, UserPass, ExamId, QuestionId, CalibrateMs, CorrectedDateTime, null);
    }
    
    /// <remarks/>
    public void SubmitAsync(string UserName, string UserPass, int ExamId, long QuestionId, int[] CalibrateMs, string CorrectedDateTime, object userState) {
        if ((this.SubmitOperationCompleted == null)) {
            this.SubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitOperationCompleted);
        }
        this.InvokeAsync("Submit", new object[] {
                    UserName,
                    UserPass,
                    ExamId,
                    QuestionId,
                    CalibrateMs,
                    CorrectedDateTime}, this.SubmitOperationCompleted, userState);
    }
    
    private void OnSubmitOperationCompleted(object arg) {
        if ((this.SubmitCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SubmitCompleted(this, new SubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void GetInputDataCompletedEventHandler(object sender, GetInputDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetInputDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetInputDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string[] MemberTimes {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void SubmitCompletedEventHandler(object sender, SubmitCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
